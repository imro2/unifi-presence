<?xml version="1.0"?>
<implementation>
  <specVersion>
    <major>1</major>
    <minor>5</minor>
  </specVersion>
  <settings>
    <protocol>cr</protocol>
  </settings>
  <startup>main</startup>
  <functions>
    local UNIFI_SID = "urn:livehouse-automation:serviceId:UnifiSensor1"
    local SWITCH_SID = "urn:upnp-org:serviceId:SwitchPower1"
    local SECURITY_SID = "urn:micasaverde-com:serviceId:SecuritySensor1"
    local HADEVICE_SID = "urn:micasaverde-com:serviceId:HaDevice1"
    local GATEWAY_SID = "urn:micasaverde-com:serviceId:HomeAutomationGateway1"

    local DEBUG_MODE = false
    local DEFAULT_PERIOD = 60
    local DEFAULT_ADDRESS = "DE:CA:F0:C0:FF:EE"

    local currentFailureCount = 0

    local function log(text)
      local id = PARENT_DEVICE or "unknown"
      luup.log("UnifiSensor #" .. id .. " " .. text)
    end


    local function debug(text)
      if (DEBUG_MODE == true) then
        log(text)
      end
    end


    --
    -- Initializes variables if none were found in config
    --
    local function initSettings(address, period, invert, enable, allowedFailure, url, username, passwd)
      --
      -- Create a fallback delay if no parameters are given
      --
      if (period == nil or tonumber(period) &lt;= DEFAULT_PERIOD) then
        period = DEFAULT_PERIOD
      end

      -- Defaults
      address = address or DEFAULT_ADDRESS
      enable = enable or "1"
      invert = invert or 0
      allowedFailure = allowedFailure or 0
	  url = url or "192.168.0.252:8443"
	  username = username or "verauser"
	  passwd = passwd or "password"

	  
      luup.variable_set(UNIFI_SID, "Period", period, parentDevice)
      luup.variable_set(UNIFI_SID, "Address", address, parentDevice)
      luup.variable_set(UNIFI_SID, "Invert", invert, parentDevice)
      luup.variable_set(SWITCH_SID, "Target", enable, parentDevice)
      luup.variable_set(SWITCH_SID, "Status", enable, parentDevice)
      luup.variable_set(UNIFI_SID, "AllowedFailure", allowedFailure, parentDevice)
	  luup.variable_set(UNIFI_SID, "UnifiURL", url, parentDevice)
	  luup.variable_set(UNIFI_SID, "UnifiUser", username, parentDevice)
	  luup.variable_set(UNIFI_SID, "UnifiPassword", passwd, parentDevice)
      luup.variable_set(HADEVICE_SID, "LastUpdate", os.time(os.date('*t')), parentDevice)
      luup.variable_set(HADEVICE_SID, "Configured", "1", parentDevice)

      log("Initialized variable: 'Address' = " .. address)
      log("Initialized variable: 'Period' = " .. period)
      log("Initialized variable: 'Invert' = " .. invert)
      log("Initialized variable: 'Enable' = " .. enable)
	  log("Initialized variable: 'URL' = " .. url)
	  log("Initialized variable: 'User' = " .. username)
	  log("Initialized variable: 'Pass' = " .. passwd)

      luup.task("Please restart Luup to initialize the plugin.", 1, "Unifi Sensor", -1)

      return address, period, invert, enable, url, username, passwd
    end


    local function readSettings(parentDevice)
      --
      -- Get local address and delay between repetition from configuration
      --
      local address = luup.variable_get(UNIFI_SID, "Address", parentDevice)
      local period = luup.variable_get(UNIFI_SID, "Period", parentDevice)
      local invert = luup.variable_get(UNIFI_SID, "Invert", parentDevice)
      local enable = luup.variable_get(SWITCH_SID, "Status", parentDevice)
      local allowedFailure = luup.variable_get(UNIFI_SID, "AllowedFailure", parentDevice)
	  local url = luup.variable_get(UNIFI_SID, "UnifiURL", parentDevice)
	  local username = luup.variable_get(UNIFI_SID, "UnifiUser", parentDevice)
	  local passwd = luup.variable_get(UNIFI_SID, "UnifiPassword", parentDevice)

      --
      -- init configuration variables if they were empty
      --
      if (address == nil or period == nil or invert == nil or enable == nil or allowedFailure == nil or url == nil or username == nil or passwd == nil) then
        address, period, invert, enable, url, username, passwd = initSettings(address, period, invert, enable, allowedFailure, url, username, passwd)
      end

      return address, period, invert, enable, url, username, passwd
    end


    --
    -- Read configuration from device.
    --
    -- Here we get address for querying
    --
    -- Thanks go out to *Guessed* from micasaverde forum for his great weather plugin.
    -- Without his work this never would have been possible in such a short time.
    --
	-- AW - Ditto.
    --
    -- The main function is used for starting up device
    --
	
    function main(parentDevice)
      --
      -- Note these are "pass-by-Global" values that refreshCache will later use.
      --
      PARENT_DEVICE = parentDevice

      log("This looks like rock and/or roll. Punch it Chewie.")
	
      -- Validate that the Address/Delay are configured in Vera, otherwise this
      -- code wont work.
      --
      local address, period, invert, enable, url, username, passwd = readSettings(parentDevice)
      if (address == nil or period == nil) then
        log("That ended badly.")
        luup.set_failure(true, parentDevice)
        return false
      end

      -- 
      -- currentFailureCount is persisting over luup engine restart
      --
      currentFailureCount = luup.variable_get(UNIFI_SID, "CurrentFailureCount", parentDevice)
      currentFailureCount = tonumber(currentFailureCount) or 0

      --
      -- Do this deferred to avoid slowing down startup processes.
      --
      luup.call_timer("refreshCache", 1, "1", "")
      return true
    end


    -- Query the Unifi Controller with given parameters
    --
    -- address (String): IP address, MAC, or anything else that shows up in the Unifi JSON
    --
	-- period (Integer): How often this sensor is configured to query
	--
	-- parentDevice (Integer): Device ID of this sensor
	--
    -- return (Integer):
    --                "1", if address string is present in Unifi JSON
    --                "0", if address string is not present in Unifi JSON. 
    --
    local function executeUnifiQuery(address, period, parentDevice, url, username, passwd)
	
	--	set a device message to see what's going on
	    local statusmsg = "Polling: " .. address .. " Refresh: " .. period .. "s"
		luup.device_message(parentDevice, 7, statusmsg, 5, "Unifi Sensor")
		
	--	build the command line to execute and measure query time.
		local cmdline = "/etc/cmh-ludl/unifi_check_v1.sh " .. parentDevice .. " " .. period .. " " .. address .. " " .. url .. " " .. username .. " " .. passwd
		local start_time = os.time()
		local returnCode = os.execute(cmdline)
		local end_time = os.time()
		local run_time = os.difftime(end_time, start_time)
		log("Unifi Controller Response Time: " .. run_time)
		
      if (returnCode == 0) then
        -- grep found the address in the JSON
		log("Address found in Unifi JSON")
		luup.device_message(parentDevice, 4, "Address Found. Query Time: " .. run_time .. "s", 5, "Unifi Sensor")
        return "1"
      elseif (returnCode == 256) then
        -- grep didn't find the address in the JSON and os.execute return codes are multiplied by 256
        log("Address not found in Unifi JSON")
		luup.device_message(parentDevice, 4, "Address Not Found. Query Time: " .. run_time .. "s", 5, "Unifi Sensor")
        return "0"
	  else
		-- one day write better reporting of curl return codes for debugging.
		log("Something went pear shaped running curl in the query script. ErrorCode: " .. tostring(returnCode))
		luup.device_message(parentDevice, 3, "Error querying Unifi: " .. returnCode, 10, "Unifi Sensor")
		return "2"
      end
    end


    --
    -- This function reverts the query result if neccessary
    --
    -- queryResult(String)
    --                 Result of executed query
    -- invertFlag(String)
    --                Set to "1" if result should be inverted
    --                Set to "0" if result should be passed through
    --
    -- return (String)
    --                 (not) inverted query result
    --
    local function invertResult(queryResult, invertFlag)
      if (invertFlag ~= "0") then
        if (queryResult == "0") then
          -- everything is fine, we reached found the address and invert result
          return "1"
        else
          return "0"
        end
      else
        return queryResult
      end
    end


    --
    -- Writing the result of our query to the UI
    --
    -- parentDevice:
    --                The id of the current device
    -- queryResult:
    --                A value of "1" for presence detected, a value of "0" for no presence / error occoured
    --                If invert flag is set to "1" then the value meanings are reversed
    --
    local function setResult(parentDevice, queryResult)
      -- Store the current query result only when it has changed
      local origTripped = luup.variable_get(SECURITY_SID, "Tripped", parentDevice) or "0"
      local allowedFailure = luup.variable_get(UNIFI_SID, "AllowedFailure", parentDevice) or 0
	  
      -- If queryResult is positive, always reset currentFailureCount
      if (queryResult == "1") then
        currentFailureCount = 0
      	luup.variable_set(UNIFI_SID, "CurrentFailureCount", 0, parentDevice)
      end
	
	  -- Check that we got a result from the Unifi Controller before messing with the sensor status.	
	  
      if (queryResult == "0" or queryResult == "1") then
	  
		  -- Last result was positive, current result is negative, and the allowed failures is not reached
		  -- keep queryResult positive as long allowedFailure is not reached
		  if (origTripped == "1" and queryResult == "0" and currentFailureCount &lt; tonumber(allowedFailure)) then
			queryResult = "1"
			currentFailureCount = currentFailureCount + 1		
			luup.variable_set(UNIFI_SID, "CurrentFailureCount", currentFailureCount, parentDevice)
			log("Unifi Query failed, failure = " .. currentFailureCount .. "/".. allowedFailure)
		  end
		  
		  
		  if (origTripped  ~= queryResult) then
			local time = os.time(os.date('*t'))

			luup.variable_set(SECURITY_SID, "Tripped", queryResult, parentDevice)
			luup.variable_set(HADEVICE_SID, "LastUpdate", time, parentDevice)

			if ((queryResult == "1") and (origTripped == "0")) then
			  luup.variable_set(SECURITY_SID, "LastTrip", time, parentDevice)
			end
		  end
	  end
    end


    --
    -- Here are all functions started in the correct sequence
    -- triggered by a timer
    --
    function refreshCache()
      --
      -- Reset the timer at the beginning, just in case the subsequent code fails.
      --
      -- The last parameter is temporary, can be removed in later builds once bug fix
      -- is in place (http://forum.micasaverde.com/index.php?topic=1608.0)
      --
      local address, period, invert, enable, url, username, passwd = readSettings(parentDevice)
      luup.call_timer("refreshCache", 1, tostring(period), "")

      --
      -- To avoid having to be able to "cancel" a running timer, esp after repeated
      -- enable/disable calls, we simply "do nothing" in this code if the timer is
      -- disabled.  The actual timer itself is never stopped, we simply don't respond
      -- if we're disabled.
      --
      if (enable == "1") then
        -- Query the address, write result, inverted if necessary.
        setResult(PARENT_DEVICE, invertResult(executeUnifiQuery(address, period, PARENT_DEVICE, url, username, passwd), invert))
        debug("Unifi Query Enabled, executed")
      else
        debug("Unifi Query Disabled, not executed " .. (enable or "No value"))
      end
    end
  </functions>
  <actionList>
    <action>
      <serviceId>urn:micasaverde-com:serviceId:SecuritySensor1</serviceId>
      <name>SetArmed</name>
      <run>
        luup.variable_set(SECURITY_SID, "Armed", lul_settings.newArmedValue, lul_device)
        return 4, 0
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>GetAddress</name>
      <run>
        luup.variable_get(UNIFI_SID, "Address", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>SetAddress</name>
      <run>
        luup.variable_set(UNIFI_SID, "Address", lul_settings.newAddressValue, parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>GetPeriod</name>
      <run>
        luup.variable_get(UNIFI_SID, "Period", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>SetPeriod</name>
      <run>
        luup.variable_set(UNIFI_SID, "Period", lul_settings.newPeriodValue, parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>GetAllowedFailure</name>
      <run>
        luup.variable_get(UNIFI_SID, "AllowedFailure", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>SetAllowedFailure</name>
      <run>
        luup.variable_set(UNIFI_SID, "AllowedFailure", lul_settings.newAllowedFailureValue, parentDevice)
      </run>
    </action>
	<action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>GetInvert</name>
      <run>
        luup.variable_get(UNIFI_SID, "Invert", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>SetInvert</name>
      <run>
        luup.variable_set(UNIFI_SID, "Invert", lul_settings.newInvertValue, parentDevice)

        -- Invert the current state of the Sensor also.
        local tripped = luup.variable_get(SECURITY_SID, "Tripped", parentDevice)
        if (tripped == "1") then
            luup.variable_set(SECURITY_SID, "Tripped", "0", parentDevice)
        else
            luup.variable_set(SECURITY_SID, "Tripped", "1", parentDevice)
        end
      </run>
    </action>
    
	<action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>GetUnifiURL</name>
      <run>
        luup.variable_get(UNIFI_SID, "UnifiURL", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>SetUnifiURL</name>
      <run>
        luup.variable_set(UNIFI_SID, "UnifiURL", lul_settings.newUnifiURLValue, parentDevice)
      </run>
    </action>
	<action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>GetUnifiUser</name>
      <run>
        luup.variable_get(UNIFI_SID, "UnifiUser", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>SetUnifiUser</name>
      <run>
        luup.variable_set(UNIFI_SID, "UnifiUser", lul_settings.newUnifUserValue, parentDevice)
      </run>
    </action>
	<action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>GetUnifiPassword</name>
      <run>
        luup.variable_get(UNIFI_SID, "UnifiPassword", parentDevice)
      </run>
    </action>
    <action>
      <serviceId>urn:livehouse-automation:serviceId:UnifiSensor1</serviceId>
      <name>SetUnifiPassword</name>
      <run>
        luup.variable_set(UNIFI_SID, "UnifiPassword", lul_settings.newUnifiPasswordValue, parentDevice)
      </run>
    </action>
	
    <action>
      <serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
      <name>SetTarget</name>
      <run>
        luup.variable_set(SWITCH_SID, "Target", lul_settings.newTargetValue, parentDevice)
        luup.variable_set(SWITCH_SID, "Status", lul_settings.newTargetValue, parentDevice)
      </run>
    </action>
  </actionList>
</implementation>
